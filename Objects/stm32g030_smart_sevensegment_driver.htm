<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\stm32g030_smart_sevensegment_driver.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\stm32g030_smart_sevensegment_driver.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Apr 23 06:16:23 2025
<BR><P>
<H3>Maximum Stack Usage =         88 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
TIM16_IRQHandler &rArr; COMM_Timer_ISR_Handler &rArr; COMM_RX_Packet_Disassemble &rArr; Protocol_Disassemble_Packet &rArr; Protocol_Response_Digit_Multiple
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[1f]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[10]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">ADC1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[f]">DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[18]">I2C2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[7]">RTC_TAMP_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1a]">SPI2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1d]">SystemInit</a> from system_stm32g0xx.o(.text.SystemInit) referenced from startup_stm32g030xx.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from sevensegment.o(.text.TIM14_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[15]">TIM16_IRQHandler</a> from comm.o(.text.TIM16_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[16]">TIM17_IRQHandler</a> from sevensegment.o(.text.TIM17_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from comm.o(.text.USART1_IRQHandler) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1c]">USART2_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32g030xx.o(.text) referenced from startup_stm32g030xx.o(RESET)
 <LI><a href="#[1e]">__main</a> from __main.o(!!!main) referenced from startup_stm32g030xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[20]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[22]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[26]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a4]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[a5]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[a9]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[af]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[b8]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2b]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[bf]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[21]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[23]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[25]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c1]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[27]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; App_Mainloop &rArr; Protocol_Response_Mainloop &rArr; Protocol_Build_Status_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[30]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[2a]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c3]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2c]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32g030xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32g030xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c4]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[24]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[29]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c7]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c8]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[c9]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>ADC_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_Init &rArr; ADC_Reg_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Reg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Reg_Init
</UL>

<P><STRONG><a name="[cb]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>ADC_Read_Channel</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, adc.o(.text.ADC_Read_Channel))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Reg_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Read_Brightness
</UL>

<P><STRONG><a name="[32]"></a>ADC_Reg_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, adc.o(.text.ADC_Reg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Reg_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[33]"></a>App_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app.o(.text.App_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = App_Config &rArr; SevenSegment_Init &rArr; SevenSegment_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Init
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Max_Brightness_Set
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Manual_Brightness_Set
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Automic_Brightness_On
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>App_Mainloop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app.o(.text.App_Mainloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = App_Mainloop &rArr; Protocol_Response_Mainloop &rArr; Protocol_Build_Status_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Read_Complete
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Data_Available
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>COMM_Buf_Flush</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, comm.o(.text.COMM_Buf_Flush))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Read_Complete
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[56]"></a>COMM_Buf_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm.o(.text.COMM_Buf_Get))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_CRC_Check
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Manual_Brightness
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Function_Enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Display_Status
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Digit_Single
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Digit_Multiple
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Decimal_Point_Single
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Decimal_Point_Multiple
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Auto_Brightness_ADC
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Error_Check
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[47]"></a>COMM_Buf_Get_Index</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm.o(.text.COMM_Buf_Get_Index))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_ISR_Handler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Data_Len_Get
</UL>

<P><STRONG><a name="[3f]"></a>COMM_CRC_Calculate_Block</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, comm.o(.text.COMM_CRC_Calculate_Block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_CRC_Check
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Status_Packet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Manual_Brightness_Val_Packet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Func_En_Packet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Dp_Single_Packet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Dp_Multiple_Packet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Digit_Single_Packet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Digit_Multiple_Packet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Auto_Brightness_ADC_Val_Packet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Ack_Nack_Packet
</UL>

<P><STRONG><a name="[40]"></a>COMM_CRC_Calculate_Byte</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, comm.o(.text.COMM_CRC_Calculate_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
</UL>

<P><STRONG><a name="[41]"></a>COMM_Config_BAUD_Rate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, comm.o(.text.COMM_Config_BAUD_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMM_Config_BAUD_Rate
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[50]"></a>COMM_Config_Clock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, comm.o(.text.COMM_Config_Clock))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[4f]"></a>COMM_Config_GPIO</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, comm.o(.text.COMM_Config_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMM_Config_GPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[52]"></a>COMM_Config_Rx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, comm.o(.text.COMM_Config_Rx))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[43]"></a>COMM_Config_Rx_Interrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, comm.o(.text.COMM_Config_Rx_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMM_Config_Rx_Interrupt &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[51]"></a>COMM_Config_Tx</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, comm.o(.text.COMM_Config_Tx))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[3c]"></a>COMM_Data_Available</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm.o(.text.COMM_Data_Available))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Mainloop
</UL>

<P><STRONG><a name="[89]"></a>COMM_Data_CRC_Status_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm.o(.text.COMM_Data_CRC_Status_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Error_Check
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[59]"></a>COMM_Data_Clear_Available_Flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(.text.COMM_Data_Clear_Available_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Read_Complete
</UL>

<P><STRONG><a name="[5a]"></a>COMM_Data_Clear_Read_Complete_Flag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(.text.COMM_Data_Clear_Read_Complete_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Read_Complete
</UL>

<P><STRONG><a name="[46]"></a>COMM_Data_Len_Get</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, comm.o(.text.COMM_Data_Len_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMM_Data_Len_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get_Index
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_CRC_Check
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Error_Check
</UL>

<P><STRONG><a name="[5b]"></a>COMM_Error_Code_Clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm.o(.text.COMM_Error_Code_Clear))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Read_Complete
</UL>

<P><STRONG><a name="[48]"></a>COMM_ISR_Handler</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, comm.o(.text.COMM_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = COMM_ISR_Handler &rArr; COMM_Rx_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Value_Reset
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Enable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Rx_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[36]"></a>COMM_Init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, comm.o(.text.COMM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = COMM_Init &rArr; COMM_Timer_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Value_Reset
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Struct_Init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Struct_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Struct_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Config_Tx
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Config_Rx_Interrupt
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Config_Rx
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Config_GPIO
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Config_Clock
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Config_BAUD_Rate
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Config
</UL>

<P><STRONG><a name="[55]"></a>COMM_RX_Packet_CRC_Check</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, comm.o(.text.COMM_RX_Packet_CRC_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = COMM_RX_Packet_CRC_Check &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Data_Len_Get
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_ISR_Handler
</UL>

<P><STRONG><a name="[57]"></a>COMM_RX_Packet_Disassemble</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, comm.o(.text.COMM_RX_Packet_Disassemble))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = COMM_RX_Packet_Disassemble &rArr; Protocol_Disassemble_Packet &rArr; Protocol_Response_Digit_Multiple
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_ISR_Handler
</UL>

<P><STRONG><a name="[3e]"></a>COMM_RX_Packet_Read_Complete</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, comm.o(.text.COMM_RX_Packet_Read_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMM_RX_Packet_Read_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Error_Code_Clear
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Data_Clear_Read_Complete_Flag
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Data_Clear_Available_Flag
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Flush
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_ISR_Handler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Mainloop
</UL>

<P><STRONG><a name="[4d]"></a>COMM_RX_Packet_Struct_Init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, comm.o(.text.COMM_RX_Packet_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[49]"></a>COMM_Rx_Byte</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, comm.o(.text.COMM_Rx_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = COMM_Rx_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_ISR_Handler
</UL>

<P><STRONG><a name="[4c]"></a>COMM_Struct_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, comm.o(.text.COMM_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMM_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[5d]"></a>COMM_Timer_Clear_Interrupt_Flag</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, comm.o(.text.COMM_Timer_Clear_Interrupt_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_ISR_Handler
</UL>

<P><STRONG><a name="[5e]"></a>COMM_Timer_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(.text.COMM_Timer_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_ISR_Handler
</UL>

<P><STRONG><a name="[4b]"></a>COMM_Timer_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, comm.o(.text.COMM_Timer_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_ISR_Handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[5c]"></a>COMM_Timer_ISR_Handler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, comm.o(.text.COMM_Timer_ISR_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = COMM_Timer_ISR_Handler &rArr; COMM_RX_Packet_Disassemble &rArr; Protocol_Disassemble_Packet &rArr; Protocol_Response_Digit_Multiple
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Disable
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Clear_Interrupt_Flag
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Disassemble
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_CRC_Check
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get_Index
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Read_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM16_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>COMM_Timer_Init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, comm.o(.text.COMM_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = COMM_Timer_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[4e]"></a>COMM_Timer_Struct_Init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, comm.o(.text.COMM_Timer_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[4a]"></a>COMM_Timer_Value_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, comm.o(.text.COMM_Timer_Value_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_ISR_Handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Init
</UL>

<P><STRONG><a name="[5f]"></a>COMM_Tx_Buf</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, comm.o(.text.COMM_Tx_Buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = COMM_Tx_Buf
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Tx_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Transmit_Packet
</UL>

<P><STRONG><a name="[60]"></a>COMM_Tx_Byte</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, comm.o(.text.COMM_Tx_Byte))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Tx_Buf
</UL>

<P><STRONG><a name="[90]"></a>LDR_Automic_Brightness_Off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ldr.o(.text.LDR_Automic_Brightness_Off))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Function_Enable
</UL>

<P><STRONG><a name="[39]"></a>LDR_Automic_Brightness_On</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ldr.o(.text.LDR_Automic_Brightness_On))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Function_Enable
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Config
</UL>

<P><STRONG><a name="[87]"></a>LDR_Automic_Brightness_Sts_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ldr.o(.text.LDR_Automic_Brightness_Sts_Get))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disp_Sts_Get
</UL>

<P><STRONG><a name="[61]"></a>LDR_Control_Brightness</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, ldr.o(.text.LDR_Control_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LDR_Control_Brightness &rArr; LDR_Read_Brightness &rArr; LPF_Get_Filtered_Value &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Read_Brightness
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Set_Brightness
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>LDR_GPIO_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ldr.o(.text.LDR_GPIO_Init))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Init
</UL>

<P><STRONG><a name="[70]"></a>LDR_Get_ADC_Val</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ldr.o(.text.LDR_Get_ADC_Val))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Status_Packet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Auto_Brightness_ADC_Val_Packet
</UL>

<P><STRONG><a name="[7d]"></a>LDR_Get_Current_Brightness</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ldr.o(.text.LDR_Get_Current_Brightness))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Status_Packet
</UL>

<P><STRONG><a name="[34]"></a>LDR_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ldr.o(.text.LDR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LDR_Init &rArr; LDR_Reg_Init &rArr; ADC_Init &rArr; ADC_Reg_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Set_Alpha
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Struct_Init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Reg_Init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Config
</UL>

<P><STRONG><a name="[7a]"></a>LDR_Manual_Brightness_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ldr.o(.text.LDR_Manual_Brightness_Get))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Manual_Brightness_Val_Packet
</UL>

<P><STRONG><a name="[3a]"></a>LDR_Manual_Brightness_Set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ldr.o(.text.LDR_Manual_Brightness_Set))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Manual_Brightness
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Config
</UL>

<P><STRONG><a name="[38]"></a>LDR_Max_Brightness_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ldr.o(.text.LDR_Max_Brightness_Set))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Config
</UL>

<P><STRONG><a name="[62]"></a>LDR_Read_Brightness</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldr.o(.text.LDR_Read_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LDR_Read_Brightness &rArr; LPF_Get_Filtered_Value &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Get_Filtered_Value
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Read_Channel
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Control_Brightness
</UL>

<P><STRONG><a name="[67]"></a>LDR_Reg_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ldr.o(.text.LDR_Reg_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LDR_Reg_Init &rArr; ADC_Init &rArr; ADC_Reg_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Read_Channel
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Init
</UL>

<P><STRONG><a name="[65]"></a>LDR_Struct_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ldr.o(.text.LDR_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Init
</UL>

<P><STRONG><a name="[6c]"></a>LPF_Get_Alpha</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpf.o(.text.LPF_Get_Alpha))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Get_Filtered_Value
</UL>

<P><STRONG><a name="[6b]"></a>LPF_Get_Filtered_Value</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lpf.o(.text.LPF_Get_Filtered_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LPF_Get_Filtered_Value &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Get_Alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Read_Brightness
</UL>

<P><STRONG><a name="[68]"></a>LPF_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lpf.o(.text.LPF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LPF_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Init
</UL>

<P><STRONG><a name="[69]"></a>LPF_Set_Alpha</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lpf.o(.text.LPF_Set_Alpha))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Init
</UL>

<P><STRONG><a name="[6d]"></a>LPF_Struct_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lpf.o(.text.LPF_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Init
</UL>

<P><STRONG><a name="[6e]"></a>Protocol_Build_Ack_Nack_Packet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Build_Ack_Nack_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Protocol_Build_Ack_Nack_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[6f]"></a>Protocol_Build_Auto_Brightness_ADC_Val_Packet</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Build_Auto_Brightness_ADC_Val_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Protocol_Build_Auto_Brightness_ADC_Val_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Get_ADC_Val
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[71]"></a>Protocol_Build_Digit_Multiple_Packet</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Build_Digit_Multiple_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Protocol_Build_Digit_Multiple_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Segment_Char_Values_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[73]"></a>Protocol_Build_Digit_Single_Packet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Build_Digit_Single_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Protocol_Build_Digit_Single_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Segment_Char_Values_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[74]"></a>Protocol_Build_Dp_Multiple_Packet</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Build_Dp_Multiple_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Protocol_Build_Dp_Multiple_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Dp_Values_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[76]"></a>Protocol_Build_Dp_Single_Packet</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Build_Dp_Single_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Protocol_Build_Dp_Single_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Dp_Values_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[77]"></a>Protocol_Build_Func_En_Packet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Build_Func_En_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Protocol_Build_Func_En_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disp_Sts_Get
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[79]"></a>Protocol_Build_Manual_Brightness_Val_Packet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Build_Manual_Brightness_Val_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Protocol_Build_Manual_Brightness_Val_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Manual_Brightness_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[7b]"></a>Protocol_Build_Status_Packet</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Build_Status_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Protocol_Build_Status_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disp_Sts_Get
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_CRC_Calculate_Block
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Get_Current_Brightness
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Get_ADC_Val
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Segment_Char_Values_Get
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Dp_Byte_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[58]"></a>Protocol_Disassemble_Packet</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, protocol.o(.text.Protocol_Disassemble_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Protocol_Disassemble_Packet &rArr; Protocol_Response_Digit_Multiple
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Manual_Brightness
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Function_Enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Display_Status
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Digit_Single
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Digit_Multiple
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Decimal_Point_Single
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Decimal_Point_Multiple
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Auto_Brightness_ADC
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Error_Check
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Disassemble
</UL>

<P><STRONG><a name="[78]"></a>Protocol_Disp_Sts_Get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, protocol.o(.text.Protocol_Disp_Sts_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_Disp_Sts_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Automic_Brightness_Sts_Get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Display_Enable_Sts
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Status_Packet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Func_En_Packet
</UL>

<P><STRONG><a name="[7e]"></a>Protocol_Error_Check</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Error_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Protocol_Error_Check &rArr; COMM_Data_Len_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Data_Len_Get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Data_CRC_Status_Get
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[37]"></a>Protocol_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, protocol.o(.text.Protocol_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocol_Init &rArr; Protocol_Struct_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Config
</UL>

<P><STRONG><a name="[86]"></a>Protocol_Response_Auto_Brightness_ADC</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, protocol.o(.text.Protocol_Response_Auto_Brightness_ADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_Response_Auto_Brightness_ADC
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[84]"></a>Protocol_Response_Decimal_Point_Multiple</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, protocol.o(.text.Protocol_Response_Decimal_Point_Multiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Protocol_Response_Decimal_Point_Multiple
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Set_Dp
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[83]"></a>Protocol_Response_Decimal_Point_Single</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Response_Decimal_Point_Single))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocol_Response_Decimal_Point_Single
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Set_Dp
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[82]"></a>Protocol_Response_Digit_Multiple</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, protocol.o(.text.Protocol_Response_Digit_Multiple))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Protocol_Response_Digit_Multiple
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Set_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[81]"></a>Protocol_Response_Digit_Single</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Response_Digit_Single))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocol_Response_Digit_Single
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Set_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[7f]"></a>Protocol_Response_Display_Status</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, protocol.o(.text.Protocol_Response_Display_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_Response_Display_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[80]"></a>Protocol_Response_Function_Enable</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Response_Function_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocol_Response_Function_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Automic_Brightness_Off
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Set_Dp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Display_Enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Display_Disable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Auto_Dp_Toggle_Enable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Auto_Dp_Toggle_Disable
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Automic_Brightness_On
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[3d]"></a>Protocol_Response_Mainloop</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Response_Mainloop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Protocol_Response_Mainloop &rArr; Protocol_Build_Status_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Transmit_Packet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Status_Packet
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Manual_Brightness_Val_Packet
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Func_En_Packet
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Dp_Single_Packet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Dp_Multiple_Packet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Digit_Single_Packet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Digit_Multiple_Packet
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Auto_Brightness_ADC_Val_Packet
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Ack_Nack_Packet
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Data_CRC_Status_Get
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_RX_Packet_Read_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Mainloop
</UL>

<P><STRONG><a name="[85]"></a>Protocol_Response_Manual_Brightness</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, protocol.o(.text.Protocol_Response_Manual_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Protocol_Response_Manual_Brightness
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Buf_Get
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Manual_Brightness_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disassemble_Packet
</UL>

<P><STRONG><a name="[8a]"></a>Protocol_Struct_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, protocol.o(.text.Protocol_Struct_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Protocol_Struct_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Init
</UL>

<P><STRONG><a name="[92]"></a>Protocol_Transmit_Packet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, protocol.o(.text.Protocol_Transmit_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Protocol_Transmit_Packet &rArr; COMM_Tx_Buf
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Tx_Buf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Mainloop
</UL>

<P><STRONG><a name="[95]"></a>SevenSegment_Activate_Digit</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, sevensegment.o(.text.SevenSegment_Activate_Digit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SevenSegment_Activate_Digit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Brightness_Handler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Assign_Digit_Value
</UL>

<P><STRONG><a name="[93]"></a>SevenSegment_Assign_Digit_Value</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sevensegment.o(.text.SevenSegment_Assign_Digit_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SevenSegment_Assign_Digit_Value &rArr; SevenSegment_Activate_Digit
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Assign_Segment_Value
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Activate_Digit
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Brightness_Handler
</UL>

<P><STRONG><a name="[94]"></a>SevenSegment_Assign_Segment_Value</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sevensegment.o(.text.SevenSegment_Assign_Segment_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SevenSegment_Assign_Segment_Value
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Set_Segment_Pins
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Assign_Digit_Value
</UL>

<P><STRONG><a name="[97]"></a>SevenSegment_Auto_Brightness_Timer_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sevensegment.o(.text.SevenSegment_Auto_Brightness_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SevenSegment_Auto_Brightness_Timer_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Init
</UL>

<P><STRONG><a name="[91]"></a>SevenSegment_Auto_Dp_Toggle_Disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Auto_Dp_Toggle_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Function_Enable
</UL>

<P><STRONG><a name="[8e]"></a>SevenSegment_Auto_Dp_Toggle_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Auto_Dp_Toggle_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Function_Enable
</UL>

<P><STRONG><a name="[9a]"></a>SevenSegment_Brightness_Handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, sevensegment.o(.text.SevenSegment_Brightness_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SevenSegment_Brightness_Handler &rArr; SevenSegment_Assign_Digit_Value &rArr; SevenSegment_Activate_Digit
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Set_Segment_Pins
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Assign_Digit_Value
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Activate_Digit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_ISR_Executables
</UL>

<P><STRONG><a name="[8d]"></a>SevenSegment_Display_Disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Display_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Function_Enable
</UL>

<P><STRONG><a name="[8f]"></a>SevenSegment_Display_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Display_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Function_Enable
</UL>

<P><STRONG><a name="[88]"></a>SevenSegment_Display_Enable_Sts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Display_Enable_Sts))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Disp_Sts_Get
</UL>

<P><STRONG><a name="[7c]"></a>SevenSegment_Dp_Byte_Get</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sevensegment.o(.text.SevenSegment_Dp_Byte_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SevenSegment_Dp_Byte_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Dp_Values_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Status_Packet
</UL>

<P><STRONG><a name="[75]"></a>SevenSegment_Dp_Values_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Dp_Values_Get))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Dp_Single_Packet
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Dp_Multiple_Packet
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Dp_Byte_Get
</UL>

<P><STRONG><a name="[9d]"></a>SevenSegment_GPIO_Init</STRONG> (Thumb, 340 bytes, Stack size 36 bytes, sevensegment.o(.text.SevenSegment_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SevenSegment_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Init
</UL>

<P><STRONG><a name="[9b]"></a>SevenSegment_ISR_Executables</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, sevensegment.o(.text.SevenSegment_ISR_Executables))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SevenSegment_ISR_Executables &rArr; SevenSegment_Brightness_Handler &rArr; SevenSegment_Assign_Digit_Value &rArr; SevenSegment_Activate_Digit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Brightness_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM14_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>SevenSegment_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sevensegment.o(.text.SevenSegment_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SevenSegment_Init &rArr; SevenSegment_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Timer_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Struct_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_GPIO_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Auto_Brightness_Timer_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Config
</UL>

<P><STRONG><a name="[72]"></a>SevenSegment_Segment_Char_Values_Get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Segment_Char_Values_Get))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Status_Packet
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Digit_Single_Packet
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Build_Digit_Multiple_Packet
</UL>

<P><STRONG><a name="[64]"></a>SevenSegment_Set_Brightness</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sevensegment.o(.text.SevenSegment_Set_Brightness))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SevenSegment_Set_Brightness
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Control_Brightness
</UL>

<P><STRONG><a name="[8b]"></a>SevenSegment_Set_Dp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Set_Dp))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Function_Enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Decimal_Point_Single
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Decimal_Point_Multiple
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM17_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>SevenSegment_Set_Segment_Pins</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Set_Segment_Pins))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Brightness_Handler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Assign_Segment_Value
</UL>

<P><STRONG><a name="[8c]"></a>SevenSegment_Set_Value</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Set_Value))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Digit_Single
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Protocol_Response_Digit_Multiple
</UL>

<P><STRONG><a name="[9c]"></a>SevenSegment_Struct_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sevensegment.o(.text.SevenSegment_Struct_Init))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Init
</UL>

<P><STRONG><a name="[9e]"></a>SevenSegment_Timer_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sevensegment.o(.text.SevenSegment_Timer_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SevenSegment_Timer_Init &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Init
</UL>

<P><STRONG><a name="[1d]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_stm32g0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sevensegment.o(.text.TIM14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIM14_IRQHandler &rArr; SevenSegment_ISR_Executables &rArr; SevenSegment_Brightness_Handler &rArr; SevenSegment_Assign_Digit_Value &rArr; SevenSegment_Activate_Digit
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_ISR_Executables
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM16_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, comm.o(.text.TIM16_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TIM16_IRQHandler &rArr; COMM_Timer_ISR_Handler &rArr; COMM_RX_Packet_Disassemble &rArr; Protocol_Disassemble_Packet &rArr; Protocol_Response_Digit_Multiple
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM17_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sevensegment.o(.text.TIM17_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM17_IRQHandler &rArr; LDR_Control_Brightness &rArr; LDR_Read_Brightness &rArr; LPF_Get_Filtered_Value &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Set_Dp
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Control_Brightness
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, comm.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; COMM_ISR_Handler &rArr; COMM_Rx_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_ISR_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32g030xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>WDT_Init</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, wdt.o(.text.WDT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>WDT_Reload</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wdt.o(.text.WDT_Reload))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28]"></a>main</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = main &rArr; App_Mainloop &rArr; Protocol_Response_Mainloop &rArr; Protocol_Build_Status_Packet &rArr; COMM_CRC_Calculate_Block
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Reload
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Mainloop
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Config_BAUD_Rate
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Timer_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Auto_Brightness_Timer_Init
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text_divfast))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPF_Get_Filtered_Value
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LDR_Control_Brightness
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[98]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sevensegment.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Timer_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Auto_Brightness_Timer_Init
</UL>

<P><STRONG><a name="[99]"></a>__NVIC_SetPriority</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, sevensegment.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Timer_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SevenSegment_Auto_Brightness_Timer_Init
</UL>

<P><STRONG><a name="[44]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, comm.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Config_Rx_Interrupt
</UL>

<P><STRONG><a name="[45]"></a>__NVIC_SetPriority</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, comm.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Timer_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;COMM_Config_Rx_Interrupt
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[2f]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
